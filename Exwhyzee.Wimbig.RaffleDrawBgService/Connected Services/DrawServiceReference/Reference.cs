//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DrawServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://rs/asoft/nlgs/webservices/drawservice", ConfigurationName="DrawServiceReference.DrawDetailsService")]
    public interface DrawDetailsService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<DrawServiceReference.DrawResponse1> DrawAsync(DrawServiceReference.DrawRequest1 request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://rs/asoft/nlgs/webservices/drawservice")]
    public partial class DrawRequest
    {
        
        private int permitHolderIdField;
        
        private int gameTypeField;
        
        private string drawingDateTimeField;
        
        private string drawDescField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int permitHolderId
        {
            get
            {
                return this.permitHolderIdField;
            }
            set
            {
                this.permitHolderIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int gameType
        {
            get
            {
                return this.gameTypeField;
            }
            set
            {
                this.gameTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string drawingDateTime
        {
            get
            {
                return this.drawingDateTimeField;
            }
            set
            {
                this.drawingDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string drawDesc
        {
            get
            {
                return this.drawDescField;
            }
            set
            {
                this.drawDescField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://rs/asoft/nlgs/webservices/drawservice")]
    public partial class DrawResponse
    {
        
        private string responseField;
        
        private string dateRequestField;
        
        private string dateResponseField;
        
        private string transactionNumberField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string response
        {
            get
            {
                return this.responseField;
            }
            set
            {
                this.responseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public string dateRequest
        {
            get
            {
                return this.dateRequestField;
            }
            set
            {
                this.dateRequestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public string dateResponse
        {
            get
            {
                return this.dateResponseField;
            }
            set
            {
                this.dateResponseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string transactionNumber
        {
            get
            {
                return this.transactionNumberField;
            }
            set
            {
                this.transactionNumberField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DrawRequest1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://rs/asoft/nlgs/webservices/drawservice", Order=0)]
        public DrawServiceReference.DrawRequest DrawRequest;
        
        public DrawRequest1()
        {
        }
        
        public DrawRequest1(DrawServiceReference.DrawRequest DrawRequest)
        {
            this.DrawRequest = DrawRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DrawResponse1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://rs/asoft/nlgs/webservices/drawservice", Order=0)]
        public DrawServiceReference.DrawResponse DrawResponse;
        
        public DrawResponse1()
        {
        }
        
        public DrawResponse1(DrawServiceReference.DrawResponse DrawResponse)
        {
            this.DrawResponse = DrawResponse;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface DrawDetailsServiceChannel : DrawServiceReference.DrawDetailsService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class DrawDetailsServiceClient : System.ServiceModel.ClientBase<DrawServiceReference.DrawDetailsService>, DrawServiceReference.DrawDetailsService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DrawDetailsServiceClient() : 
                base(DrawDetailsServiceClient.GetDefaultBinding(), DrawDetailsServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.DrawDetailsServiceSoap11.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DrawDetailsServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DrawDetailsServiceClient.GetBindingForEndpoint(endpointConfiguration), DrawDetailsServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DrawDetailsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DrawDetailsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DrawDetailsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DrawDetailsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DrawDetailsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<DrawServiceReference.DrawResponse1> DrawServiceReference.DrawDetailsService.DrawAsync(DrawServiceReference.DrawRequest1 request)
        {
            return base.Channel.DrawAsync(request);
        }
        
        public System.Threading.Tasks.Task<DrawServiceReference.DrawResponse1> DrawAsync(DrawServiceReference.DrawRequest DrawRequest)
        {
            DrawServiceReference.DrawRequest1 inValue = new DrawServiceReference.DrawRequest1();
            inValue.DrawRequest = DrawRequest;
            return ((DrawServiceReference.DrawDetailsService)(this)).DrawAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DrawDetailsServiceSoap11))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DrawDetailsServiceSoap11))
            {
                return new System.ServiceModel.EndpointAddress("http://178.253.196.22:9080/AsoftNLGS/endpoints");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DrawDetailsServiceClient.GetBindingForEndpoint(EndpointConfiguration.DrawDetailsServiceSoap11);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DrawDetailsServiceClient.GetEndpointAddress(EndpointConfiguration.DrawDetailsServiceSoap11);
        }
        
        public enum EndpointConfiguration
        {
            
            DrawDetailsServiceSoap11,
        }
    }
}
